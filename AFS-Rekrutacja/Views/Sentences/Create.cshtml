@model AFS_Rekrutacja.Models.Sentences

@{
    ViewBag.Title = "Translate";
}

<h2>Translate</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Sentence</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Text, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Text, new { htmlAttributes = new { @class = "form-control", @id = "userInput" } })
                @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TranslatedText, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TranslatedText, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @Value = @ViewBag.translated } })
                @Html.ValidationMessageFor(model => model.TranslatedText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TranslationID, "TranslationID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TranslationID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TranslationID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="createButton" type="submit" value="Create" class="btn btn-default" disabled />
                <span id='error'>@ViewBag.error</span>
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Go to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // Accept only not empty input.
        function validateCreateButton() {
            var buttonDisabled = $('#userInput').val().trim() === '';
            $('#createButton').prop('disabled', buttonDisabled);
        }
        $('#userInput').on('keyup', validateCreateButton);
    </script>
}
