@model AFS_Rekrutacja.Models.Sentences

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Sentences</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)

        <div class="form-group">
            @Html.LabelFor(model => model.Text, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Text, new { htmlAttributes = new { @class = "form-control", @id ="userInput" } })
                @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TranslatedText, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.TranslatedText, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.TranslatedText, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TranslationID, "TranslationID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TranslationID", null, htmlAttributes: new { @class = "form-control", @id ="translationDropdown" })
                @Html.ValidationMessageFor(model => model.TranslationID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input id="editButton" type="submit" value="Save" class="btn btn-default" disabled />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        // Accept only not empty input.
        // User can "edit" without changing text to get diffrent translation (even from the same "language").
        // Edit button is disabled at start just in case.
        function validateEditButton() {
            var buttonDisabled = $('#userInput').val().trim() === '' && $('#translationDropDown').val != null ;
            $('#editButton').prop('disabled', buttonDisabled);
        }
        $('#userInput').on('keyup', validateEditButton);
        $('#translationDropdown').on('change', validateEditButton);
    </script>
}
